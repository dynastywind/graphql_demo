type Query {
    actorById(id: Long): Actor
    actors(page: Int, size: Int): ActorConnection @connection(for: "Actor")
}

type Actor {
    id: Long
    firstName: String
    lastName: String
    lastUpdate: datetime
    films: [Film!]
}

type Film {
    id: Long
    title: String!
    description: String
    releaseYear: Int
    rentalDuration: Int!
    rentalRate: Float!
    length: Int
    replacementCost: Float!
    rating: String
    specialFeatures: String!
    lastUpdate: datetime
    language: Langugae
    originalLanguage: Langugae
    actors: [Actor!]
}

type Langugae {
    id: Long
    name: String
    lastUpdate: datetime
}

type A {
    demo: JSONType
}

input LanguageInput {
    id: Long
}

input TestInput {
    id: Long
    messages: JSONType
}

type Mutation {
    createActor(actor: ActorInput): Actor
    test(in: TestInputAudit @audit(for: "TestInput")): String
#    test(in: String): String
}

input ActorInput {
    id: Long
    firstName: String
    lastName: String
    lastUpdate: datetime
    films: [FilmInput!]
}

input FilmInput {
    id: Long
    title: String!
    actors: [ActorInput!]
    language: LanguageInput!
    rentalDuration: Int!
    rentalRate: Float!
    replacementCost: Float!
    lastUpdate: datetime!
}

scalar Long
scalar JSONType
scalar datetime